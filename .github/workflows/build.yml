# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: setup
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build cmake zip unzip
        
        curl -L -O https://github.com/mstorsjo/llvm-mingw/releases/download/20200325/llvm-mingw-20200325-ubuntu-18.04.tar.xz
        
        tar -Jxvf llvm-mingw-20200325-ubuntu-18.04.tar.xz

        ./clone-repo.sh
        cd llvm-project
        git fetch --tags
        git checkout llvmorg-10.0.0
        cd ..

    - name: build-compiler-rt
      run: |
        cd $GITHUB_WORKSPACE

        export LLVM_MINGW_DIR=`pwd`/llvm-mingw-20200325-ubuntu-18.04
        
        ./build-compiler-rt-mingw-cross.sh
        
    - name: build-native
      run: |
        cd $GITHUB_WORKSPACE

        ./build-native-tools.sh
        
    - name: build-llvm-mingw
      run: |
        cd $GITHUB_WORKSPACE

        export LLVM_MINGW_DIR=`pwd`/llvm-mingw-20200325-ubuntu-18.04

        ./build-llvm-mingw-cross.sh

    - name: build-libcxx
      run: |
        cd $GITHUB_WORKSPACE

        export LLVM_MINGW_DIR=`pwd`/llvm-mingw-20200325-ubuntu-18.04

        ./build-libcxx-mingw-cross.sh

    - name: zip
      run: |

        cd $GITHUB_WORKSPACE

        zip -r dist-w64-mingw32.zip dist-w64-mingw32

    - uses: actions/upload-artifact@v2
      with:
        name: dist-w64-mingw32.zip
        path: dist-w64-mingw32.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist-w64-mingw32.zip
        asset_name: dist-w64-mingw32.zip
        asset_content_type: application/zip
